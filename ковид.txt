1 Число беременностей (все пациенты из источника – женщины не моложе 21 года индийской народности пима).
2 Концентрация глюкозы в плазме через 2 часа после введения в пероральном  глюкозотолерантном тесте.
3 Диастолическое артериальное давление (мм рт. ст.).
4 Толщина кожной складки в районе трицепса (мм).
5 Концентрация инсулина в сыворотке крови (мкЕд/мл).
6 Индекс массы тела (вес в кг/(рост в м)^2).
7 Функция, описывающая генетическую предрасположенность к диабету (diabetes pedegree).
8 Возраст (годы).
--------------------------------------------------
1 пол
2 возраст
3 наличие или отсутсвие типичныхдля пневмонии сиптомов (кашель, отдышка, слабость и др.)
4 дополнительные заболевания (сахарный диабет)
5 ширина распределения эритроцитов
6 значение гематокрита
7 уровень С-реактивного белка

Библиотека Keras позволяет запускать нейронные сети с минимальным количеством операций. В качестве модели нейронной сети используется последовательная Sequental из модуля keras.models с заданием слоев keras.layers типа Dense.

Для последующей воспроизводимости результатов зафиксируем генератор случайных чисел при помощи функции random.seed() из библиотеки numpy. Считаем данные из датасета:

Разделим данные на матрицу признаков X и вектор целевой переменной Y (последний столбец датасета):

Создаем модель нейронной сети:

Опишем структуру модели нейронной сети. Определим входной, выходной и скрытые слои. Наша нейронная сеть будет иметь плотную (Dense) структуру – каждый нейрон связан со всеми нейронами следующего слоя. Выходной слой будет состоять из единственного нейрона, определяющего вероятность заболевания диабетом.

Слой добавляется к модели методом add(). Для входного слоя необходимо указать число признаков input_dim, равное в нашем случае 8:

Если наборы признаков образуют многомерную таблицу, то вместо параметра input_dim можно использовать параметр input_shape, принимающий кортеж с количеством элементов в каждом из измерений.
В качестве функции активации для всех слоев, кроме выходного, будем использовать функцию ReLU. Для выходного слоя воспользуемся сигмоидной функцией для определения конечной вероятности риска заболевания.

Создадим три скрытых слоя и один выходной слой нашей нейронной сети:

Первые числа, передаваемые Dense, это количества нейронов, экспериментально оптимизированные в результате вариации структуры нейронной сети. Вы можете изменять количество скрытых слоев и содержащихся в них нейронов, чтобы добиться лучшего качества предсказательности модели.
Перед тем, как начать тренировать модель, ее нужно скомпилировать при помощи метода compile():

Методу передается три параметра:

loss – функция потерь – объект, который модель стремиться минимизировать;
optimizer – оптимизатор, мы используем встроенный метод стохастической оптимизации adam, описанный в публикации Дедерика Кингма и Джимми Ба;
metrics – список метрик оптимизации, для задач классификации используется метрику 'accuracy'.
Для обучения нейронной сети применяем метод fit():

Параметр epochs – "эпохи" – количество проходов нейронной сети по всем записям датасета (выбирается исходя из того, насколько быстро модель с каждым новым проходом приближается к желаемой предсказательной точности), batch_size – количество объектов выборки, берущихся за один шаг. В процессе обучения API будет выводить соответствующие строчки с величинам функции потерь и метрики для каждой из эпох.
Оценим результат обучения нейронной сети. Метод evaluate() возвращает значения функции потерь и метрики для обученной модели:

Последняя строчка в форматированном виде выводит точность прогноза по нашей модели для заданной метрики accuracy: